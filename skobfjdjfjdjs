function loadRayfield()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local TweenService = game:GetService("TweenService")
    local RunService = game:GetService("RunService")
    local Players = game:GetService("Players")
    local lp = Players.LocalPlayer
    local PlayerGui = lp:WaitForChild("PlayerGui")

    local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
    local Window = Rayfield:CreateWindow({
        Name = "Auto Block Hub",
        LoadingTitle = "Auto Block Script",
        LoadingSubtitle = "by Skibidi Shots",
        ConfigurationSaving = {
            Enabled = true,
            FolderName = "AutoBlockHub",
            FileName = "Settings"
        },
        Discord = {Enabled = false},
        KeySystem = false
    })

    local AutoBlockTab = Window:CreateTab("Auto Block", 4483362458)
    local FakeBlockTab = Window:CreateTab("Fake Block", 4483362458)
    local AutoPunchTab = Window:CreateTab("Auto Punch", 4483362458)
    local CustomAnimationsTab = Window:CreateTab("Custom Animations", 4483362458)

    local toggleOn, strictRangeOn, looseFacing = false, false, true
    local detectionRange = 18
    local autoPunchOn, flingPunchOn = false, false
    local customBlockEnabled, customPunchEnabled = false, false
    local customBlockAnimId, customPunchAnimId = "", ""
    local flingPower = 10000
    local hiddenfling = false

    local function playCustomAnimation(animId)
        if not lp.Character then return end
        local hum = lp.Character:FindFirstChildOfClass("Humanoid")
        if hum and animId and animId ~= "" then
            local anim = Instance.new("Animation")
            anim.AnimationId = "rbxassetid://" .. animId
            local track = hum:LoadAnimation(anim)
            track:Play()
        end
    end

    AutoBlockTab:CreateToggle({
        Name = "Auto Block",
        CurrentValue = false,
        Callback = function(Value) toggleOn = Value end
    })

    AutoBlockTab:CreateToggle({
        Name = "Strict Range",
        CurrentValue = false,
        Callback = function(Value) strictRangeOn = Value end
    })

    AutoBlockTab:CreateDropdown({
        Name = "Facing Mode",
        Options = {"Loose", "Strict"},
        CurrentOption = "Loose",
        Callback = function(Option) looseFacing = Option == "Loose" end
    })

    AutoBlockTab:CreateInput({
        Name = "Detection Range",
        PlaceholderText = "18",
        RemoveTextAfterFocusLost = false,
        Callback = function(Text)
            detectionRange = tonumber(Text) or detectionRange
        end
    })

    FakeBlockTab:CreateToggle({
        Name = "Load Fake Block",
        CurrentValue = false,
        Callback = function(Value)
            local fakeGui = PlayerGui:FindFirstChild("FakeBlockGui")
            if Value then
                if not fakeGui then
                    loadstring(game:HttpGet("https://pastebin.com/raw/ztnYv27k"))()
                else
                    fakeGui.Enabled = true
                end
            else
                if fakeGui then
                    fakeGui.Enabled = false
                end
            end
        end
    })

    AutoPunchTab:CreateToggle({
        Name = "Auto Punch",
        CurrentValue = false,
        Callback = function(Value) autoPunchOn = Value end
    })

    AutoPunchTab:CreateToggle({
        Name = "Fling Punch",
        CurrentValue = false,
        Callback = function(Value) flingPunchOn = Value end
    })

    AutoPunchTab:CreateSlider({
        Name = "Fling Power",
        Range = {5000, 50000},
        Increment = 1000,
        CurrentValue = 10000,
        Callback = function(Value) flingPower = Value end
    })

    CustomAnimationsTab:CreateInput({
        Name = "Custom Block Animation",
        PlaceholderText = "AnimationId",
        RemoveTextAfterFocusLost = false,
        Callback = function(Text) customBlockAnimId = Text end
    })

    CustomAnimationsTab:CreateToggle({
        Name = "Enable Custom Block Animation",
        CurrentValue = false,
        Callback = function(Value) customBlockEnabled = Value end
    })

    CustomAnimationsTab:CreateInput({
        Name = "Custom Punch Animation (does not work on m3/m4 Parries.)",
        PlaceholderText = "AnimationId",
        RemoveTextAfterFocusLost = false,
        Callback = function(Text) customPunchAnimId = Text end
    })

    CustomAnimationsTab:CreateToggle({
        Name = "Enable Custom Punch Animation",
        CurrentValue = false,
        Callback = function(Value) customPunchEnabled = Value end
    })

    local function fireRemoteBlock()
        local args = {"UseActorAbility", "Block"}
        ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
        if customBlockEnabled then
            playCustomAnimation(customBlockAnimId)
        end
    end

    local function isFacing(localRoot, targetRoot)
        local directionToPlayer = (localRoot.Position - targetRoot.Position).Unit
        local facingDirection = targetRoot.CFrame.LookVector
        return looseFacing and facingDirection:Dot(directionToPlayer) > -0.3 or facingDirection:Dot(directionToPlayer) > 0
    end

    coroutine.wrap(function()
        local hrp, c, vel, movel = nil, nil, nil, 0.1
        while true do
            RunService.Heartbeat:Wait()
            if hiddenfling then
                while hiddenfling and not (c and c.Parent and hrp and hrp.Parent) do
                    RunService.Heartbeat:Wait()
                    c = lp.Character
                    hrp = c and c:FindFirstChild("HumanoidRootPart")
                end
                if hiddenfling then
                    vel = hrp.Velocity
                    hrp.Velocity = vel * flingPower + Vector3.new(0, flingPower, 0)
                    RunService.RenderStepped:Wait()
                    if c and c.Parent and hrp and hrp.Parent then
                        hrp.Velocity = vel
                    end
                    RunService.Stepped:Wait()
                    if c and c.Parent and hrp and hrp.Parent then
                        hrp.Velocity = vel + Vector3.new(0, movel, 0)
                        movel = movel * -1
                    end
                end
            end
        end
    end)()

    RunService.Heartbeat:Connect(function()
        local myChar = lp.Character
        local myRoot = myChar and myChar:FindFirstChild("HumanoidRootPart")
        if not myRoot then return end

        if autoPunchOn then
            local gui = lp:FindFirstChild("PlayerGui")
            local punchCharges = gui and gui:FindFirstChild("MainUI") and gui.MainUI:FindFirstChild("AbilityContainer") and gui.MainUI.AbilityContainer:FindFirstChild("Punch") and gui.MainUI.AbilityContainer.Punch:FindFirstChild("Charges")
            if punchCharges and punchCharges.Text == "1" then
                for _, player in ipairs(Players:GetPlayers()) do
                    if player ~= lp and player.Character then
                        local root = player.Character:FindFirstChild("HumanoidRootPart")
                        if root and (root.Position - myRoot.Position).Magnitude <= 10 then
                            local punchButton = gui.MainUI.AbilityContainer.Punch
                            for _, conn in ipairs(getconnections(punchButton.MouseButton1Click)) do
                                pcall(function() conn:Fire() end)
                            end
                            if customPunchEnabled then
                                playCustomAnimation(customPunchAnimId)
                            end
                            if flingPunchOn then
                                hiddenfling = true
                                TweenService:Create(myRoot, TweenInfo.new(0.04, Enum.EasingStyle.Linear), {CFrame = root.CFrame}):Play()
                                task.delay(1.5, function()
                                    hiddenfling = false
                                end)
                            end
                            break
                        end
                    end
                end
            end
        end

        if toggleOn then
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= lp and player.Character then
                    local root = player.Character:FindFirstChild("HumanoidRootPart")
                    if root and myRoot and (root.Position - myRoot.Position).Magnitude <= detectionRange then
                        if not strictRangeOn or isFacing(myRoot, root) then
                            fireRemoteBlock()
                            break
                        end
                    end
                end
            end
        end
    end)

    -- Manual block and punch hooks (custom anims)
    task.delay(1, function()
        local gui = lp:FindFirstChild("PlayerGui")
        if gui and gui:FindFirstChild("MainUI") then
            local punchBtn = gui.MainUI:FindFirstChild("AbilityContainer") and gui.MainUI.AbilityContainer:FindFirstChild("Punch")
            if punchBtn then
                for _, conn in ipairs(getconnections(punchBtn.MouseButton1Click)) do
                    local oldFunc = conn.Function
                    conn:Disable()
                    punchBtn.MouseButton1Click:Connect(function(...)
                        oldFunc(...)
                        if customPunchEnabled then
                            playCustomAnimation(customPunchAnimId)
                        end
                    end)
                end
            end

            local blockBtn = gui.MainUI.AbilityContainer:FindFirstChild("Block")
            if blockBtn then
                for _, conn in ipairs(getconnections(blockBtn.MouseButton1Click)) do
                    local oldFunc = conn.Function
                    conn:Disable()
                    blockBtn.MouseButton1Click:Connect(function(...)
                        oldFunc(...)
                        if customBlockEnabled then
                            playCustomAnimation(customBlockAnimId)
                        end
                    end)
                end
            end
        end
    end)
end

-- Run it
loadRayfield()
